{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","query","filter","handleQuery","event","setState","target","value","handleFilter","filterTodos","todos","props","filteredTodos","todo","title","toLowerCase","includes","completed","onUserSelection","this","className","type","name","onChange","map","classNames","readOnly","onClick","userId","id","React","Component","API_URL","loadTodos","a","fetch","response","json","loadUser","CurrentUser","user","reloadUser","prevProps","email","phone","resetSelection","App","selectedUserId","handleUserSelection","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38afe1f2.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  onUserSelection: (userId: number) => void;\n  todos: Todo[];\n};\n\ntype State = {\n  query: string;\n  filter: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    query: '',\n    filter: 'All',\n  };\n\n  handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ query: event.target.value });\n  };\n\n  handleFilter = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ filter: event.target.value });\n  };\n\n  filterTodos = () => {\n    const { todos } = this.props;\n    const { query, filter } = this.state;\n\n    let filteredTodos = todos.filter(todo => (todo.title\n      && todo.title.toLowerCase().includes(query.toLowerCase())));\n\n    filteredTodos = filteredTodos.filter(todo => {\n      switch (filter) {\n        case 'Active':\n          return !todo.completed;\n        case 'Completed':\n          return todo.completed;\n        case 'All':\n        default:\n          return todos;\n      }\n    });\n\n    return filteredTodos;\n  };\n\n  render() {\n    const { onUserSelection } = this.props;\n    const { query, filter } = this.state;\n    const filteredTodos = this.filterTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__form\">\n          <input\n            type=\"text\"\n            name=\"query\"\n            value={query}\n            className=\"TodoList__item\"\n            onChange={this.handleQuery}\n          />\n\n          <select\n            name=\"filter\"\n            value={filter}\n            className=\"TodoList__item\"\n            onChange={this.handleFilter}\n          >\n            <option value=\"All\">All</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map((todo) => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => {\n                    onUserSelection(todo.userId);\n                  }}\n                >\n                  User&nbsp;#$\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","export const API_URL = 'https://mate.academy/students-api';\n\nexport const loadTodos = async () => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const loadUser = async (userId: number) => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { loadUser } from '../../api';\n\ntype Props = {\n  userId: number;\n  resetSelection: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.reloadUser(this.props.userId);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.reloadUser(this.props.userId);\n    }\n  }\n\n  async reloadUser(userId: number) {\n    const user = await loadUser(userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <div>User not found</div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"button\"\n          className=\"button CurrentUser__clear\"\n          onClick={this.props.resetSelection}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { loadTodos } from './api';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const data = await loadTodos();\n\n    this.setState({\n      todos: data,\n    });\n  }\n\n  handleUserSelection = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  resetSelection = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onUserSelection={this.handleUserSelection}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                resetSelection={this.resetSelection}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}